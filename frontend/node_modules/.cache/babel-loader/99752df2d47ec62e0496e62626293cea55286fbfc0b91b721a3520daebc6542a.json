{"ast":null,"code":"var _jsxFileName = \"/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-test/src/components/ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Button } from '@mui/material';\nimport '../styles/ChatInterface.css';\nimport micIcon from '../assets/icons/mic.png';\nimport sendIcon from '../assets/icons/send.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuickSuggestions = ({\n  onSuggestionClick\n}) => {\n  const suggestions = ['how do i start ?', 'can you guide me through ?', 'how do i fix?'];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'center',\n      mt: 2,\n      mb: 2,\n      flexWrap: 'wrap'\n    },\n    children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: () => onSuggestionClick(suggestion),\n      sx: {\n        mx: 1,\n        my: 1,\n        color: '#E0E0E0',\n        backgroundColor: '#284F7D',\n        fontSize: '20px',\n        fontWeight: 500,\n        boxShadow: '4px 4px 4px rgba(0, 0, 0, 0.5)',\n        '&:hover': {\n          backgroundColor: '#1E3A5F',\n          borderColor: '#E0E0E0'\n        }\n      },\n      children: suggestion\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = QuickSuggestions;\nconst ChatInterface = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() !== '') {\n      setMessages([...messages, {\n        text: inputMessage,\n        sender: 'user'\n      }]);\n\n      // Call Claude API to get a response\n      const response = await getClaudeResponse(inputMessage);\n      setAiResponse(response);\n      setInputMessage('');\n    }\n  };\n  const getClaudeResponse = async message => {\n    try {\n      const response = await fetch('http://localhost:5000/api/claude', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: message,\n          model: 'claude-v1',\n          max_tokens_to_sample: 300\n        })\n      });\n      const data = await response.json();\n      return data.completion;\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      return 'Failed to get AI response. Please try again.';\n    }\n  };\n  const handleMicrophoneClick = () => {\n    console.log('Microphone clicked');\n    // TODO: Implement voice input functionality\n  };\n  const handleSuggestionClick = suggestion => {\n    setInputMessage(suggestion);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"question\",\n      children: \"What can I help you with?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          placeholder: \"Enter your prompt here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: micIcon,\n          alt: \"Microphone\",\n          className: \"mic-icon\",\n          onClick: handleMicrophoneClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: sendIcon,\n          alt: \"Send\",\n          className: \"send-icon\",\n          onClick: handleSendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuickSuggestions, {\n      onSuggestionClick: handleSuggestionClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), aiResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-response\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: aiResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"0T977gsUHdcgGQkQr7BCuSsiMvE=\");\n_c2 = ChatInterface;\nexport default ChatInterface;\nvar _c, _c2;\n$RefreshReg$(_c, \"QuickSuggestions\");\n$RefreshReg$(_c2, \"ChatInterface\");","map":{"version":3,"names":["React","useState","Box","Button","micIcon","sendIcon","jsxDEV","_jsxDEV","QuickSuggestions","onSuggestionClick","suggestions","sx","display","justifyContent","mt","mb","flexWrap","children","map","suggestion","index","variant","onClick","mx","my","color","backgroundColor","fontSize","fontWeight","boxShadow","borderColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","ChatInterface","_s","messages","setMessages","inputMessage","setInputMessage","aiResponse","setAiResponse","handleSendMessage","trim","text","sender","response","getClaudeResponse","message","fetch","method","headers","body","JSON","stringify","prompt","model","max_tokens_to_sample","data","json","completion","error","console","handleMicrophoneClick","log","handleSuggestionClick","className","type","value","onChange","e","target","placeholder","src","alt","_c2","$RefreshReg$"],"sources":["/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-test/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Box, Button } from '@mui/material';\nimport '../styles/ChatInterface.css';\nimport micIcon from '../assets/icons/mic.png';\nimport sendIcon from '../assets/icons/send.png';\n\nconst QuickSuggestions = ({ onSuggestionClick }) => {\n  const suggestions = [\n    'how do i start ?',\n    'can you guide me through ?',\n    'how do i fix?'\n  ];\n\n  return (\n    <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2, mb: 2, flexWrap: 'wrap' }}>\n      {suggestions.map((suggestion, index) => (\n        <Button \n          key={index} \n          variant=\"outlined\" \n          onClick={() => onSuggestionClick(suggestion)}\n          sx={{ \n            mx: 1, \n            my: 1, \n            color: '#E0E0E0',\n            backgroundColor: '#284F7D',\n            fontSize: '20px',\n            fontWeight: 500,\n            boxShadow: '4px 4px 4px rgba(0, 0, 0, 0.5)',\n            '&:hover': {\n              backgroundColor: '#1E3A5F',\n              borderColor: '#E0E0E0',\n            }\n          }}\n        >\n          {suggestion}\n        </Button>\n      ))}\n    </Box>\n  );\n}\n\nconst ChatInterface = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() !== '') {\n      setMessages([...messages, { text: inputMessage, sender: 'user' }]);\n\n      // Call Claude API to get a response\n      const response = await getClaudeResponse(inputMessage);\n      setAiResponse(response);\n\n      setInputMessage('');\n    }\n  };\n\n  const getClaudeResponse = async (message) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/claude', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          prompt: message,\n          model: 'claude-v1',\n          max_tokens_to_sample: 300,\n        }),\n      });\n      \n      const data = await response.json();\n      return data.completion;\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      return 'Failed to get AI response. Please try again.';\n    }\n  };\n\n  const handleMicrophoneClick = () => {\n    console.log('Microphone clicked');\n    // TODO: Implement voice input functionality\n  };\n\n  const handleSuggestionClick = (suggestion) => {\n    setInputMessage(suggestion);\n  };\n\n  return (\n    <div className=\"chat-interface\">\n      <p className=\"question\">What can I help you with?</p>\n      <div className=\"message-input\">\n        <div className=\"input-wrapper\">\n          <input\n            type=\"text\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            placeholder=\"Enter your prompt here...\"\n          />\n          <img \n            src={micIcon} \n            alt=\"Microphone\" \n            className=\"mic-icon\" \n            onClick={handleMicrophoneClick}\n          />\n          <img \n            src={sendIcon} \n            alt=\"Send\" \n            className=\"send-icon\" \n            onClick={handleSendMessage}\n          />\n        </div>\n      </div>\n\n      <QuickSuggestions onSuggestionClick={handleSuggestionClick} />\n\n      {aiResponse && (\n        <div className=\"ai-response\">\n          <p>{aiResponse}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}