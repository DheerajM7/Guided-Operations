{"ast":null,"code":"var _jsxFileName = \"/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-test/src/components/ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [aiResponse, setAiResponse] = useState(''); // State for AI response\n\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() !== '') {\n      setMessages([...messages, {\n        text: inputMessage,\n        sender: 'user'\n      }]);\n\n      // Call Claude API to get a response\n      const response = await getClaudeResponse(inputMessage);\n      setAiResponse(response); // Set the AI response\n\n      setInputMessage('');\n    }\n  };\n\n  // Function to get AI response from Claude API\n  const getClaudeResponse = async message => {\n    try {\n      const response = await fetch('https://api.anthropic.com/v1/complete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-api-key': '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' // Replace with your Claude API key\n        },\n        body: JSON.stringify({\n          prompt: message,\n          model: 'claude-v1',\n          // Example, adjust model if needed\n          max_tokens_to_sample: 3000 // Limit tokens for response\n        })\n      });\n      const data = await response.json();\n      return data.completion; // Get the AI response from API data\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      return 'Failed to get AI response. Please try again.';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"question\",\n      children: \"What can I help you with?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value),\n        placeholder: \"Enter your prompt here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), aiResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-response\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: aiResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"0T977gsUHdcgGQkQr7BCuSsiMvE=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatInterface","_s","messages","setMessages","inputMessage","setInputMessage","aiResponse","setAiResponse","handleSendMessage","trim","text","sender","response","getClaudeResponse","message","fetch","method","headers","body","JSON","stringify","prompt","model","max_tokens_to_sample","data","json","completion","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-test/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../styles/ChatInterface.css';\n\nconst ChatInterface = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [aiResponse, setAiResponse] = useState(''); // State for AI response\n\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() !== '') {\n      setMessages([...messages, { text: inputMessage, sender: 'user' }]);\n\n      // Call Claude API to get a response\n      const response = await getClaudeResponse(inputMessage);\n      setAiResponse(response); // Set the AI response\n\n      setInputMessage('');\n    }\n  };\n\n  // Function to get AI response from Claude API\n  const getClaudeResponse = async (message) => {\n    try {\n      const response = await fetch('https://api.anthropic.com/v1/complete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-api-key': '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', // Replace with your Claude API key\n        },\n        body: JSON.stringify({\n          prompt: message,\n          model: 'claude-v1', // Example, adjust model if needed\n          max_tokens_to_sample: 3000, // Limit tokens for response\n        }),\n      });\n\n      const data = await response.json();\n      return data.completion; // Get the AI response from API data\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      return 'Failed to get AI response. Please try again.';\n    }\n  };\n\n  return (\n    <div className=\"chat-interface\">\n      <p className=\"question\">What can I help you with?</p>\n      <div className=\"message-input\">\n        <input\n          type=\"text\"\n          value={inputMessage}\n          onChange={(e) => setInputMessage(e.target.value)}\n          placeholder=\"Enter your prompt here...\"\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n\n      {/* Conditionally render AI response only when it's not empty */}\n      {aiResponse && (\n        <div className=\"ai-response\">\n          <p>{aiResponse}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}