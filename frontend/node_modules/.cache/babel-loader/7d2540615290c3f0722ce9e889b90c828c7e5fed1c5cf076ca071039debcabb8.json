{"ast":null,"code":"var _jsxFileName = \"/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-main/frontend/src/components/ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Button, Typography } from '@mui/material';\nimport micIcon from '../assets/icons/mic.png';\nimport sendIcon from '../assets/icons/send.png';\nimport '../styles/ChatInterface.css';\n\n// Get backend URL from environment variables\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst backendUrl = process.env.REACT_APP_BACKEND_URL;\nconst QuickSuggestions = ({\n  onSuggestionClick\n}) => {\n  const suggestions = [{\n    main: 'How do I start',\n    description: '[specific task]?'\n  }, {\n    main: 'Can you guide me through',\n    description: '[process]?'\n  }, {\n    main: 'How do I fix',\n    description: '[issue/error]?'\n  }];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'center',\n      mt: 2,\n      mb: 2,\n      flexWrap: 'wrap'\n    },\n    children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => onSuggestionClick(suggestion.main),\n      sx: {\n        mx: 1,\n        my: 1,\n        color: '#FFFFFF',\n        backgroundColor: '#284F7D',\n        fontFamily: 'Urbanist, sans-serif',\n        borderRadius: '10px',\n        padding: '5px 60px',\n        textTransform: 'none',\n        boxShadow: '4px 4px 4px rgba(0, 0, 0, 0.25)',\n        border: 'none',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        '&:hover': {\n          backgroundColor: '#3A7BC8',\n          boxShadow: 'none'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          fontSize: '21px',\n          fontWeight: 600\n        },\n        children: suggestion.main\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        sx: {\n          fontSize: '16px',\n          fontWeight: 400,\n          opacity: 0.8\n        },\n        children: suggestion.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, suggestion.main, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_c = QuickSuggestions;\nconst ChatInterface = ({\n  onFirstMessageSent,\n  selectedManual\n}) => {\n  _s();\n  const [inputMessage, setInputMessage] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [isFirstMessageSent, setIsFirstMessageSent] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() !== '') {\n      if (!isFirstMessageSent) {\n        setIsFirstMessageSent(true);\n        onFirstMessageSent();\n      }\n      setLoading(true);\n      setErrorMessage(''); // Clear previous error message\n\n      try {\n        let response;\n        if (selectedManual) {\n          // If PDF is uploaded, focus on selected manual\n          response = await fetchManualResponse(inputMessage, selectedManual);\n        } else {\n          // Otherwise, call Claude API\n          response = await getClaudeResponse(inputMessage);\n        }\n        setAiResponse(response);\n      } catch (error) {\n        console.error('Error fetching AI response:', error);\n        setErrorMessage('Error fetching AI response. Please try again later.');\n      } finally {\n        setInputMessage(''); // Clear input field after sending message\n        setLoading(false);\n      }\n    }\n  };\n  const fetchManualResponse = async (message, manual) => {\n    try {\n      const response = await fetch(`${backendUrl}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_input: message,\n          selected_xml: manual,\n          // Using the selected manual\n          model: 'claude-v1',\n          max_tokens_to_sample: 300\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error in fetching response from server.');\n      }\n      const data = await response.json();\n      return data.response || data.completion;\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      throw error;\n    }\n  };\n  const getClaudeResponse = async message => {\n    try {\n      const response = await fetch(`${backendUrl}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_input: message,\n          model: 'claude-v1',\n          // Use Claude model\n          max_tokens_to_sample: 300\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error in fetching response from server.');\n      }\n      const data = await response.json();\n      return data.response || data.completion;\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      throw error;\n    }\n  };\n  const handleMicrophoneClick = () => {\n    console.log('Microphone clicked');\n    // Placeholder for implementing voice input functionality\n  };\n  const handleSuggestionClick = suggestion => {\n    setInputMessage(suggestion);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-interface ${isFirstMessageSent ? 'chat-interface-active' : ''}`,\n    children: [!isFirstMessageSent && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"question\",\n      children: \"What can I help you with?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message-input ${isFirstMessageSent ? 'message-input-bottom' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          placeholder: \"Enter your prompt here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: micIcon,\n          alt: \"Microphone\",\n          className: \"mic-icon\",\n          onClick: handleMicrophoneClick,\n          \"aria-label\": \"Activate voice input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: sendIcon,\n          alt: \"Send\",\n          className: \"send-icon\",\n          onClick: handleSendMessage,\n          \"aria-label\": \"Send message\",\n          style: {\n            opacity: inputMessage.trim() === '' ? 0.5 : 1\n          },\n          disabled: inputMessage.trim() === ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), !isFirstMessageSent && /*#__PURE__*/_jsxDEV(QuickSuggestions, {\n      onSuggestionClick: handleSuggestionClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 31\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Generating...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), aiResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `ai-response ${!loading ? 'active' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: aiResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"jXSiFgXyaf3R2ZMYqGSKBN63Rig=\");\n_c2 = ChatInterface;\nexport default ChatInterface;\nvar _c, _c2;\n$RefreshReg$(_c, \"QuickSuggestions\");\n$RefreshReg$(_c2, \"ChatInterface\");","map":{"version":3,"names":["React","useState","Box","Button","Typography","micIcon","sendIcon","jsxDEV","_jsxDEV","backendUrl","process","env","REACT_APP_BACKEND_URL","QuickSuggestions","onSuggestionClick","suggestions","main","description","sx","display","justifyContent","mt","mb","flexWrap","children","map","suggestion","variant","onClick","mx","my","color","backgroundColor","fontFamily","borderRadius","padding","textTransform","boxShadow","border","flexDirection","alignItems","fontSize","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","opacity","_c","ChatInterface","onFirstMessageSent","selectedManual","_s","inputMessage","setInputMessage","aiResponse","setAiResponse","isFirstMessageSent","setIsFirstMessageSent","loading","setLoading","errorMessage","setErrorMessage","handleSendMessage","trim","response","fetchManualResponse","getClaudeResponse","error","console","message","manual","fetch","method","headers","body","JSON","stringify","user_input","selected_xml","model","max_tokens_to_sample","ok","Error","data","json","completion","handleMicrophoneClick","log","handleSuggestionClick","className","type","value","onChange","e","target","placeholder","src","alt","style","disabled","_c2","$RefreshReg$"],"sources":["/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-main/frontend/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Box, Button, Typography } from '@mui/material';\nimport micIcon from '../assets/icons/mic.png';\nimport sendIcon from '../assets/icons/send.png';\nimport '../styles/ChatInterface.css';\n\n// Get backend URL from environment variables\nconst backendUrl = process.env.REACT_APP_BACKEND_URL;\n\nconst QuickSuggestions = ({ onSuggestionClick }) => {\n  const suggestions = [\n    { main: 'How do I start', description: '[specific task]?' },\n    { main: 'Can you guide me through', description: '[process]?' },\n    { main: 'How do I fix', description: '[issue/error]?' }\n  ];\n\n  return (\n    <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2, mb: 2, flexWrap: 'wrap' }}>\n      {suggestions.map((suggestion) => (\n        <Button\n          key={suggestion.main}\n          variant=\"contained\"\n          onClick={() => onSuggestionClick(suggestion.main)}\n          sx={{\n            mx: 1,\n            my: 1,\n            color: '#FFFFFF',\n            backgroundColor: '#284F7D',\n            fontFamily: 'Urbanist, sans-serif',\n            borderRadius: '10px',\n            padding: '5px 60px',\n            textTransform: 'none',\n            boxShadow: '4px 4px 4px rgba(0, 0, 0, 0.25)',\n            border: 'none',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            '&:hover': {\n              backgroundColor: '#3A7BC8',\n              boxShadow: 'none',\n            }\n          }}\n        >\n          <Typography sx={{ fontSize: '21px', fontWeight: 600 }}>\n            {suggestion.main}\n          </Typography>\n          <Typography sx={{ fontSize: '16px', fontWeight: 400, opacity: 0.8 }}>\n            {suggestion.description}\n          </Typography>\n        </Button>\n      ))}\n    </Box>\n  );\n};\n\nconst ChatInterface = ({ onFirstMessageSent, selectedManual }) => {\n  const [inputMessage, setInputMessage] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [isFirstMessageSent, setIsFirstMessageSent] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() !== '') {\n      if (!isFirstMessageSent) {\n        setIsFirstMessageSent(true);\n        onFirstMessageSent();\n      }\n\n      setLoading(true);\n      setErrorMessage(''); // Clear previous error message\n\n      try {\n        let response;\n        if (selectedManual) {\n          // If PDF is uploaded, focus on selected manual\n          response = await fetchManualResponse(inputMessage, selectedManual);\n        } else {\n          // Otherwise, call Claude API\n          response = await getClaudeResponse(inputMessage);\n        }\n        setAiResponse(response);\n      } catch (error) {\n        console.error('Error fetching AI response:', error);\n        setErrorMessage('Error fetching AI response. Please try again later.');\n      } finally {\n        setInputMessage(''); // Clear input field after sending message\n        setLoading(false);\n      }\n    }\n  };\n\n  const fetchManualResponse = async (message, manual) => {\n    try {\n      const response = await fetch(`${backendUrl}/api/chat`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          user_input: message,\n          selected_xml: manual, // Using the selected manual\n          model: 'claude-v1',\n          max_tokens_to_sample: 300,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Error in fetching response from server.');\n      }\n\n      const data = await response.json();\n      return data.response || data.completion;\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      throw error;\n    }\n  };\n\n  const getClaudeResponse = async (message) => {\n    try {\n      const response = await fetch(`${backendUrl}/api/chat`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          user_input: message,\n          model: 'claude-v1', // Use Claude model\n          max_tokens_to_sample: 300,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Error in fetching response from server.');\n      }\n\n      const data = await response.json();\n      return data.response || data.completion;\n    } catch (error) {\n      console.error('Error fetching AI response:', error);\n      throw error;\n    }\n  };\n\n  const handleMicrophoneClick = () => {\n    console.log('Microphone clicked');\n    // Placeholder for implementing voice input functionality\n  };\n\n  const handleSuggestionClick = (suggestion) => {\n    setInputMessage(suggestion);\n  };\n\n  return (\n    <div className={`chat-interface ${isFirstMessageSent ? 'chat-interface-active' : ''}`}>\n      {!isFirstMessageSent && <p className=\"question\">What can I help you with?</p>}\n\n      <div className={`message-input ${isFirstMessageSent ? 'message-input-bottom' : ''}`}>\n        <div className=\"input-wrapper\">\n          <input\n            type=\"text\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            placeholder=\"Enter your prompt here...\"\n          />\n          <img\n            src={micIcon}\n            alt=\"Microphone\"\n            className=\"mic-icon\"\n            onClick={handleMicrophoneClick}\n            aria-label=\"Activate voice input\"\n          />\n          <img\n            src={sendIcon}\n            alt=\"Send\"\n            className=\"send-icon\"\n            onClick={handleSendMessage}\n            aria-label=\"Send message\"\n            style={{ opacity: inputMessage.trim() === '' ? 0.5 : 1 }}\n            disabled={inputMessage.trim() === ''}\n          />\n        </div>\n      </div>\n\n      {!isFirstMessageSent && <QuickSuggestions onSuggestionClick={handleSuggestionClick} />}\n\n      {loading && (\n        <div className=\"loading\">\n          <p>Generating...</p>\n        </div>\n      )}\n\n      {aiResponse && (\n        <div className={`ai-response ${!loading ? 'active' : ''}`}>\n          <p>{aiResponse}</p>\n        </div>\n      )}\n\n      {errorMessage && (\n        <div className=\"error-message\">\n          <p>{errorMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}