{"ast":null,"code":"var _jsxFileName = \"/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-test/src/components/Sidebar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport '../styles/Sidebar.css';\nimport burgerIcon from '../assets/icons/burger.png';\nimport settingIcon from '../assets/icons/settings.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Sidebar({\n  isOpen,\n  toggleSidebar,\n  onManualSelect\n}) {\n  _s();\n  const sidebarRef = useRef(null);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [manuals, setManuals] = useState([]);\n  const [selectedManual, setSelectedManual] = useState('');\n  const toggleDropdown = () => {\n    setIsDropdownOpen(!isDropdownOpen);\n  };\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    if (file && file.type === 'application/pdf') {\n      setSelectedFile(file);\n      setUploadStatus('');\n    } else {\n      setUploadStatus('Please select a PDF file.');\n    }\n  };\n  const handleFileUpload = async () => {\n    if (!selectedFile) return;\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    try {\n      const response = await fetch('/api/process_pdf', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        const result = await response.json();\n        setUploadStatus('File uploaded successfully!');\n        setManuals(prev => [...prev, result.file_name]); // Add new manual to the list\n      } else {\n        setUploadStatus('Failed to upload the file.');\n      }\n    } catch (error) {\n      setUploadStatus('Error uploading file. Please try again.');\n    }\n  };\n\n  // Fetch the list of available manuals from the backend\n  useEffect(() => {\n    const fetchManuals = async () => {\n      const response = await fetch('/api/list_xml_files');\n      const data = await response.json();\n      setManuals(data.xml_files);\n    };\n    fetchManuals();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `sidebar ${isOpen ? 'open' : ''}`,\n    ref: sidebarRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-toggle\",\n      onClick: toggleSidebar,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: burgerIcon,\n        alt: \"Toggle Sidebar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), selectedFile && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected File: \", selectedFile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFileUpload,\n          children: \"Upload PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: uploadStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Manual for Reference\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedManual,\n        onChange: e => {\n          setSelectedManual(e.target.value);\n          onManualSelect(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a manual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), manuals.map((manual, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: manual,\n          children: manual\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(Sidebar, \"R7oHNUuKjlomTGYeeSWjUfZK9kE=\");\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useEffect","useRef","useState","burgerIcon","settingIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","Sidebar","isOpen","toggleSidebar","onManualSelect","_s","sidebarRef","isDropdownOpen","setIsDropdownOpen","selectedFile","setSelectedFile","uploadStatus","setUploadStatus","manuals","setManuals","selectedManual","setSelectedManual","toggleDropdown","handleFileChange","e","file","target","files","type","handleFileUpload","formData","FormData","append","response","fetch","method","body","ok","result","json","prev","file_name","error","fetchManuals","data","xml_files","className","ref","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","name","value","map","manual","index","_c","$RefreshReg$"],"sources":["/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-test/src/components/Sidebar.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport '../styles/Sidebar.css';\nimport burgerIcon from '../assets/icons/burger.png';\nimport settingIcon from '../assets/icons/settings.png';\n\nfunction Sidebar({ isOpen, toggleSidebar, onManualSelect }) {\n  const sidebarRef = useRef(null);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [manuals, setManuals] = useState([]); \n  const [selectedManual, setSelectedManual] = useState('');\n\n  const toggleDropdown = () => {\n    setIsDropdownOpen(!isDropdownOpen);\n  };\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    if (file && file.type === 'application/pdf') {\n      setSelectedFile(file);\n      setUploadStatus(''); \n    } else {\n      setUploadStatus('Please select a PDF file.');\n    }\n  };\n\n  const handleFileUpload = async () => {\n    if (!selectedFile) return;\n\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n\n    try {\n      const response = await fetch('/api/process_pdf', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        setUploadStatus('File uploaded successfully!');\n        setManuals(prev => [...prev, result.file_name]); // Add new manual to the list\n      } else {\n        setUploadStatus('Failed to upload the file.');\n      }\n    } catch (error) {\n      setUploadStatus('Error uploading file. Please try again.');\n    }\n  };\n\n  // Fetch the list of available manuals from the backend\n  useEffect(() => {\n    const fetchManuals = async () => {\n      const response = await fetch('/api/list_xml_files');\n      const data = await response.json();\n      setManuals(data.xml_files);\n    };\n    fetchManuals();\n  }, []);\n\n  return (\n    <div className={`sidebar ${isOpen ? 'open' : ''}`} ref={sidebarRef}>\n      <div className=\"sidebar-toggle\" onClick={toggleSidebar}>\n        <img src={burgerIcon} alt=\"Toggle Sidebar\" />\n      </div>\n      <div className=\"sidebar-content\">\n        <h2>Upload PDF</h2>\n        <input type=\"file\" accept=\"application/pdf\" onChange={handleFileChange} />\n        {selectedFile && (\n          <>\n            <p>Selected File: {selectedFile.name}</p>\n            <button onClick={handleFileUpload}>Upload PDF</button>\n          </>\n        )}\n        <p>{uploadStatus}</p>\n\n        {/* Manual Selection for AI Chat */}\n        <h3>Select Manual for Reference</h3>\n        <select \n          value={selectedManual} \n          onChange={(e) => {\n            setSelectedManual(e.target.value);\n            onManualSelect(e.target.value);\n          }}>\n          <option value=\"\">Select a manual</option>\n          {manuals.map((manual, index) => (\n            <option key={index} value={manual}>{manual}</option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}