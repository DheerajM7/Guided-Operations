{"ast":null,"code":"var _jsxFileName = \"/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-main/frontend/src/components/ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, Typography } from '@mui/material';\nimport ReactMarkdown from 'react-markdown';\nimport 'chart.js/auto';\nimport micIcon from '../assets/icons/mic.png';\nimport sendIcon from '../assets/icons/send.png';\nimport '../styles/ChatInterface.css';\nimport TelemetryChart from './TelemetryChart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst backendUrl = process.env.REACT_APP_BACKEND_URL;\nconst QuickSuggestions = ({\n  onSuggestionClick\n}) => {\n  const suggestions = [{\n    main: 'How do I start',\n    description: '[specific task]?'\n  }, {\n    main: 'Can you guide me through',\n    description: '[process]?'\n  }, {\n    main: 'How do I fix',\n    description: '[issue/error]?'\n  }];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'center',\n      mt: 2,\n      mb: 2,\n      flexWrap: 'wrap'\n    },\n    children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => onSuggestionClick(suggestion.main),\n      sx: {\n        mx: 1,\n        my: 1,\n        color: '#FFFFFF',\n        backgroundColor: '#284F7D',\n        borderRadius: '10px',\n        padding: '5px 60px',\n        textTransform: 'none',\n        boxShadow: '4px 4px 4px rgba(0, 0, 0, 0.25)',\n        '&:hover': {\n          backgroundColor: '#3A7BC8'\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            fontSize: '21px',\n            fontWeight: 600,\n            fontFamily: 'Urbanist'\n          },\n          children: suggestion.main\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            fontSize: '16px',\n            fontWeight: 400,\n            opacity: 0.8,\n            fontFamily: 'Urbanist'\n          },\n          children: suggestion.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 10\n      }, this)\n    }, suggestion.main, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_c = QuickSuggestions;\nconst ChatInterface = ({\n  onFirstMessageSent,\n  selectedManual\n}) => {\n  _s();\n  const [inputMessage, setInputMessage] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [telemetryData, setTelemetryData] = useState(null);\n  const [isFirstMessageSent, setIsFirstMessageSent] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() !== '') {\n      if (!isFirstMessageSent) {\n        setIsFirstMessageSent(true);\n        onFirstMessageSent();\n      }\n      setLoading(true);\n      setErrorMessage('');\n      setAiResponse(''); // Clear previous response\n\n      try {\n        if (selectedManual) {\n          await fetchManualResponse(inputMessage, selectedManual);\n        } else {\n          await getClaudeResponse(inputMessage);\n        }\n      } catch (error) {\n        console.error('Error fetching AI response:', error);\n        setErrorMessage('Error fetching AI response. Please try again later.');\n      } finally {\n        setInputMessage('');\n        setLoading(false);\n      }\n    }\n  };\n  const fetchManualResponse = async (message, manual) => {\n    const response = await fetch(`${backendUrl}/api/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_input: message,\n        selected_xml: manual,\n        model: 'claude-v1',\n        max_tokens_to_sample: 300\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Error in fetching response from server.');\n    }\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    while (true) {\n      const {\n        done,\n        value\n      } = await reader.read();\n      if (done) break;\n      const chunk = decoder.decode(value);\n      setAiResponse(prev => prev + chunk);\n    }\n  };\n  const getClaudeResponse = async message => {\n    const response = await fetch(`${backendUrl}/api/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_input: message,\n        model: 'claude-v1',\n        max_tokens_to_sample: 300\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Error in fetching response from server.');\n    }\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    while (true) {\n      const {\n        done,\n        value\n      } = await reader.read();\n      if (done) break;\n      const chunk = decoder.decode(value);\n      setAiResponse(prev => prev + chunk);\n    }\n  };\n  useEffect(() => {\n    // Check if the response contains telemetry data\n    try {\n      const parsedResponse = JSON.parse(aiResponse);\n      if (parsedResponse.telemetry) {\n        setTelemetryData(parsedResponse.telemetry);\n        setAiResponse('');\n      }\n    } catch (error) {\n      // If parsing fails, it's not JSON, so it's probably just text\n      setTelemetryData(null);\n    }\n  }, [aiResponse]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-interface ${isFirstMessageSent ? 'chat-interface-active' : ''}`,\n    children: [!isFirstMessageSent && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"question\",\n      children: \"What can I help you with?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message-input ${isFirstMessageSent ? 'message-input-bottom' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          placeholder: \"Enter your prompt here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: micIcon,\n          alt: \"Microphone\",\n          className: \"mic-icon\",\n          \"aria-label\": \"Activate voice input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: sendIcon,\n          alt: \"Send\",\n          className: \"send-icon\",\n          onClick: handleSendMessage,\n          \"aria-label\": \"Send message\",\n          style: {\n            opacity: inputMessage.trim() === '' ? 0.5 : 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), !isFirstMessageSent && /*#__PURE__*/_jsxDEV(QuickSuggestions, {\n      onSuggestionClick: suggestion => setInputMessage(suggestion)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 31\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Generating...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this), aiResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `ai-response ${!loading ? 'active' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n        children: aiResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this), telemetryData && /*#__PURE__*/_jsxDEV(TelemetryChart, {\n      telemetryData: telemetryData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 25\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"6BsPiQwgq38D24Gt62ddiSCb7Vo=\");\n_c2 = ChatInterface;\nexport default ChatInterface;\nvar _c, _c2;\n$RefreshReg$(_c, \"QuickSuggestions\");\n$RefreshReg$(_c2, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","Box","Button","Typography","ReactMarkdown","micIcon","sendIcon","TelemetryChart","jsxDEV","_jsxDEV","backendUrl","process","env","REACT_APP_BACKEND_URL","QuickSuggestions","onSuggestionClick","suggestions","main","description","sx","display","justifyContent","mt","mb","flexWrap","children","map","suggestion","variant","onClick","mx","my","color","backgroundColor","borderRadius","padding","textTransform","boxShadow","flexDirection","alignItems","fontSize","fontWeight","fontFamily","fileName","_jsxFileName","lineNumber","columnNumber","opacity","_c","ChatInterface","onFirstMessageSent","selectedManual","_s","inputMessage","setInputMessage","aiResponse","setAiResponse","telemetryData","setTelemetryData","isFirstMessageSent","setIsFirstMessageSent","loading","setLoading","errorMessage","setErrorMessage","handleSendMessage","trim","fetchManualResponse","getClaudeResponse","error","console","message","manual","response","fetch","method","headers","body","JSON","stringify","user_input","selected_xml","model","max_tokens_to_sample","ok","Error","reader","getReader","decoder","TextDecoder","done","value","read","chunk","decode","prev","parsedResponse","parse","telemetry","className","type","onChange","e","target","placeholder","src","alt","style","_c2","$RefreshReg$"],"sources":["/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-main/frontend/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Box, Button, Typography } from '@mui/material';\nimport ReactMarkdown from 'react-markdown';\nimport 'chart.js/auto';\nimport micIcon from '../assets/icons/mic.png';\nimport sendIcon from '../assets/icons/send.png';\nimport '../styles/ChatInterface.css';\nimport TelemetryChart from './TelemetryChart.js';\n\nconst backendUrl = process.env.REACT_APP_BACKEND_URL;\n\nconst QuickSuggestions = ({ onSuggestionClick }) => {\n  const suggestions = [\n    { main: 'How do I start', description: '[specific task]?' },\n    { main: 'Can you guide me through', description: '[process]?' },\n    { main: 'How do I fix', description: '[issue/error]?' }\n  ];\n\n  return (\n    <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2, mb: 2, flexWrap: 'wrap' }}>\n      {suggestions.map((suggestion) => (\n        <Button\n          key={suggestion.main}\n          variant=\"contained\"\n          onClick={() => onSuggestionClick(suggestion.main)}\n          sx={{\n            mx: 1,\n            my: 1,\n            color: '#FFFFFF',\n            backgroundColor: '#284F7D',\n            borderRadius: '10px',\n            padding: '5px 60px',\n            textTransform: 'none',\n            boxShadow: '4px 4px 4px rgba(0, 0, 0, 0.25)',\n            '&:hover': {\n              backgroundColor: '#3A7BC8',\n            }\n          }}\n        >\n         <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n            <Typography sx={{ fontSize: '21px', fontWeight: 600, fontFamily: 'Urbanist' }}>\n              {suggestion.main}\n            </Typography>\n            <Typography sx={{ fontSize: '16px', fontWeight: 400, opacity: 0.8, fontFamily: 'Urbanist' }}>\n              {suggestion.description}\n            </Typography>\n          </Box>\n        </Button>\n      ))}\n    </Box>\n  );\n};\n\nconst ChatInterface = ({ onFirstMessageSent, selectedManual }) => {\n  const [inputMessage, setInputMessage] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [telemetryData, setTelemetryData] = useState(null);\n  const [isFirstMessageSent, setIsFirstMessageSent] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() !== '') {\n      if (!isFirstMessageSent) {\n        setIsFirstMessageSent(true);\n        onFirstMessageSent();\n      }\n\n      setLoading(true);\n      setErrorMessage('');\n      setAiResponse(''); // Clear previous response\n\n      try {\n        if (selectedManual) {\n          await fetchManualResponse(inputMessage, selectedManual);\n        } else {\n          await getClaudeResponse(inputMessage);\n        }\n      } catch (error) {\n        console.error('Error fetching AI response:', error);\n        setErrorMessage('Error fetching AI response. Please try again later.');\n      } finally {\n        setInputMessage('');\n        setLoading(false);\n      }\n    }\n  };\n\n  const fetchManualResponse = async (message, manual) => {\n    const response = await fetch(`${backendUrl}/api/chat`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        user_input: message,\n        selected_xml: manual,\n        model: 'claude-v1',\n        max_tokens_to_sample: 300,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Error in fetching response from server.');\n    }\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n      const chunk = decoder.decode(value);\n      setAiResponse(prev => prev + chunk);\n    }\n  };\n\n  const getClaudeResponse = async (message) => {\n    const response = await fetch(`${backendUrl}/api/chat`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        user_input: message,\n        model: 'claude-v1',\n        max_tokens_to_sample: 300,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Error in fetching response from server.');\n    }\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n      const chunk = decoder.decode(value);\n      setAiResponse(prev => prev + chunk);\n    }\n  };\n\n  useEffect(() => {\n    // Check if the response contains telemetry data\n    try {\n      const parsedResponse = JSON.parse(aiResponse);\n      if (parsedResponse.telemetry) {\n        setTelemetryData(parsedResponse.telemetry);\n        setAiResponse('');\n      }\n    } catch (error) {\n      // If parsing fails, it's not JSON, so it's probably just text\n      setTelemetryData(null);\n    }\n  }, [aiResponse]);\n\n  return (\n    <div className={`chat-interface ${isFirstMessageSent ? 'chat-interface-active' : ''}`}>\n      {!isFirstMessageSent && <p className=\"question\">What can I help you with?</p>}\n\n      <div className={`message-input ${isFirstMessageSent ? 'message-input-bottom' : ''}`}>\n        <div className=\"input-wrapper\">\n          <input\n            type=\"text\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            placeholder=\"Enter your prompt here...\"\n          />\n          <img\n            src={micIcon}\n            alt=\"Microphone\"\n            className=\"mic-icon\"\n            aria-label=\"Activate voice input\"\n          />\n          <img\n            src={sendIcon}\n            alt=\"Send\"\n            className=\"send-icon\"\n            onClick={handleSendMessage}\n            aria-label=\"Send message\"\n            style={{ opacity: inputMessage.trim() === '' ? 0.5 : 1 }}\n          />\n        </div>\n      </div>\n\n      {!isFirstMessageSent && <QuickSuggestions onSuggestionClick={(suggestion) => setInputMessage(suggestion)} />}\n\n      {loading && (\n        <div className=\"loading\">\n          <p>Generating...</p>\n        </div>\n      )}\n\n      {aiResponse && (\n        <div className={`ai-response ${!loading ? 'active' : ''}`}>\n          <ReactMarkdown>{aiResponse}</ReactMarkdown>\n        </div>\n      )}\n\n      {telemetryData && <TelemetryChart telemetryData={telemetryData} />}\n\n      {errorMessage && (\n        <div className=\"error-message\">\n          <p>{errorMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatInterface;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,MAAM,EAAEC,UAAU,QAAQ,eAAe;AACvD,OAAOC,aAAa,MAAM,gBAAgB;AAC1C,OAAO,eAAe;AACtB,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAO,6BAA6B;AACpC,OAAOC,cAAc,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;AAEpD,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAkB,CAAC,KAAK;EAClD,MAAMC,WAAW,GAAG,CAClB;IAAEC,IAAI,EAAE,gBAAgB;IAAEC,WAAW,EAAE;EAAmB,CAAC,EAC3D;IAAED,IAAI,EAAE,0BAA0B;IAAEC,WAAW,EAAE;EAAa,CAAC,EAC/D;IAAED,IAAI,EAAE,cAAc;IAAEC,WAAW,EAAE;EAAiB,CAAC,CACxD;EAED,oBACET,OAAA,CAACR,GAAG;IAACkB,EAAE,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,cAAc,EAAE,QAAQ;MAAEC,EAAE,EAAE,CAAC;MAAEC,EAAE,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAO,CAAE;IAAAC,QAAA,EACpFT,WAAW,CAACU,GAAG,CAAEC,UAAU,iBAC1BlB,OAAA,CAACP,MAAM;MAEL0B,OAAO,EAAC,WAAW;MACnBC,OAAO,EAAEA,CAAA,KAAMd,iBAAiB,CAACY,UAAU,CAACV,IAAI,CAAE;MAClDE,EAAE,EAAE;QACFW,EAAE,EAAE,CAAC;QACLC,EAAE,EAAE,CAAC;QACLC,KAAK,EAAE,SAAS;QAChBC,eAAe,EAAE,SAAS;QAC1BC,YAAY,EAAE,MAAM;QACpBC,OAAO,EAAE,UAAU;QACnBC,aAAa,EAAE,MAAM;QACrBC,SAAS,EAAE,iCAAiC;QAC5C,SAAS,EAAE;UACTJ,eAAe,EAAE;QACnB;MACF,CAAE;MAAAR,QAAA,eAEHhB,OAAA,CAACR,GAAG;QAACkB,EAAE,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEkB,aAAa,EAAE,QAAQ;UAAEC,UAAU,EAAE;QAAS,CAAE;QAAAd,QAAA,gBACzEhB,OAAA,CAACN,UAAU;UAACgB,EAAE,EAAE;YAAEqB,QAAQ,EAAE,MAAM;YAAEC,UAAU,EAAE,GAAG;YAAEC,UAAU,EAAE;UAAW,CAAE;UAAAjB,QAAA,EAC3EE,UAAU,CAACV;QAAI;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACbrC,OAAA,CAACN,UAAU;UAACgB,EAAE,EAAE;YAAEqB,QAAQ,EAAE,MAAM;YAAEC,UAAU,EAAE,GAAG;YAAEM,OAAO,EAAE,GAAG;YAAEL,UAAU,EAAE;UAAW,CAAE;UAAAjB,QAAA,EACzFE,UAAU,CAACT;QAAW;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV;IAAC,GAxBDnB,UAAU,CAACV,IAAI;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAyBd,CACT;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACE,EAAA,GAxCIlC,gBAAgB;AA0CtB,MAAMmC,aAAa,GAAGA,CAAC;EAAEC,kBAAkB;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAChE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGvD,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACwD,UAAU,EAAEC,aAAa,CAAC,GAAGzD,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC0D,aAAa,EAAEC,gBAAgB,CAAC,GAAG3D,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAAC4D,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG7D,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAAC8D,OAAO,EAAEC,UAAU,CAAC,GAAG/D,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACgE,YAAY,EAAEC,eAAe,CAAC,GAAGjE,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMkE,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAIZ,YAAY,CAACa,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC9B,IAAI,CAACP,kBAAkB,EAAE;QACvBC,qBAAqB,CAAC,IAAI,CAAC;QAC3BV,kBAAkB,CAAC,CAAC;MACtB;MAEAY,UAAU,CAAC,IAAI,CAAC;MAChBE,eAAe,CAAC,EAAE,CAAC;MACnBR,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEnB,IAAI;QACF,IAAIL,cAAc,EAAE;UAClB,MAAMgB,mBAAmB,CAACd,YAAY,EAAEF,cAAc,CAAC;QACzD,CAAC,MAAM;UACL,MAAMiB,iBAAiB,CAACf,YAAY,CAAC;QACvC;MACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDL,eAAe,CAAC,qDAAqD,CAAC;MACxE,CAAC,SAAS;QACRV,eAAe,CAAC,EAAE,CAAC;QACnBQ,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;EACF,CAAC;EAED,MAAMK,mBAAmB,GAAG,MAAAA,CAAOI,OAAO,EAAEC,MAAM,KAAK;IACrD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGhE,UAAU,WAAW,EAAE;MACrDiE,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,UAAU,EAAET,OAAO;QACnBU,YAAY,EAAET,MAAM;QACpBU,KAAK,EAAE,WAAW;QAClBC,oBAAoB,EAAE;MACxB,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACV,QAAQ,CAACW,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IAEA,MAAMC,MAAM,GAAGb,QAAQ,CAACI,IAAI,CAACU,SAAS,CAAC,CAAC;IACxC,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;IAEjC,OAAO,IAAI,EAAE;MACX,MAAM;QAAEC,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,MAAM,CAACM,IAAI,CAAC,CAAC;MAC3C,IAAIF,IAAI,EAAE;MACV,MAAMG,KAAK,GAAGL,OAAO,CAACM,MAAM,CAACH,KAAK,CAAC;MACnCnC,aAAa,CAACuC,IAAI,IAAIA,IAAI,GAAGF,KAAK,CAAC;IACrC;EACF,CAAC;EAED,MAAMzB,iBAAiB,GAAG,MAAOG,OAAO,IAAK;IAC3C,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGhE,UAAU,WAAW,EAAE;MACrDiE,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,UAAU,EAAET,OAAO;QACnBW,KAAK,EAAE,WAAW;QAClBC,oBAAoB,EAAE;MACxB,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACV,QAAQ,CAACW,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IAEA,MAAMC,MAAM,GAAGb,QAAQ,CAACI,IAAI,CAACU,SAAS,CAAC,CAAC;IACxC,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;IAEjC,OAAO,IAAI,EAAE;MACX,MAAM;QAAEC,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAML,MAAM,CAACM,IAAI,CAAC,CAAC;MAC3C,IAAIF,IAAI,EAAE;MACV,MAAMG,KAAK,GAAGL,OAAO,CAACM,MAAM,CAACH,KAAK,CAAC;MACnCnC,aAAa,CAACuC,IAAI,IAAIA,IAAI,GAAGF,KAAK,CAAC;IACrC;EACF,CAAC;EAED7F,SAAS,CAAC,MAAM;IACd;IACA,IAAI;MACF,MAAMgG,cAAc,GAAGlB,IAAI,CAACmB,KAAK,CAAC1C,UAAU,CAAC;MAC7C,IAAIyC,cAAc,CAACE,SAAS,EAAE;QAC5BxC,gBAAgB,CAACsC,cAAc,CAACE,SAAS,CAAC;QAC1C1C,aAAa,CAAC,EAAE,CAAC;MACnB;IACF,CAAC,CAAC,OAAOa,KAAK,EAAE;MACd;MACAX,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC,EAAE,CAACH,UAAU,CAAC,CAAC;EAEhB,oBACE9C,OAAA;IAAK0F,SAAS,EAAE,kBAAkBxC,kBAAkB,GAAG,uBAAuB,GAAG,EAAE,EAAG;IAAAlC,QAAA,GACnF,CAACkC,kBAAkB,iBAAIlD,OAAA;MAAG0F,SAAS,EAAC,UAAU;MAAA1E,QAAA,EAAC;IAAyB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAE7ErC,OAAA;MAAK0F,SAAS,EAAE,iBAAiBxC,kBAAkB,GAAG,sBAAsB,GAAG,EAAE,EAAG;MAAAlC,QAAA,eAClFhB,OAAA;QAAK0F,SAAS,EAAC,eAAe;QAAA1E,QAAA,gBAC5BhB,OAAA;UACE2F,IAAI,EAAC,MAAM;UACXT,KAAK,EAAEtC,YAAa;UACpBgD,QAAQ,EAAGC,CAAC,IAAKhD,eAAe,CAACgD,CAAC,CAACC,MAAM,CAACZ,KAAK,CAAE;UACjDa,WAAW,EAAC;QAA2B;UAAA7D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC,eACFrC,OAAA;UACEgG,GAAG,EAAEpG,OAAQ;UACbqG,GAAG,EAAC,YAAY;UAChBP,SAAS,EAAC,UAAU;UACpB,cAAW;QAAsB;UAAAxD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC,eACFrC,OAAA;UACEgG,GAAG,EAAEnG,QAAS;UACdoG,GAAG,EAAC,MAAM;UACVP,SAAS,EAAC,WAAW;UACrBtE,OAAO,EAAEoC,iBAAkB;UAC3B,cAAW,cAAc;UACzB0C,KAAK,EAAE;YAAE5D,OAAO,EAAEM,YAAY,CAACa,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,GAAG,GAAG;UAAE;QAAE;UAAAvB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAEL,CAACa,kBAAkB,iBAAIlD,OAAA,CAACK,gBAAgB;MAACC,iBAAiB,EAAGY,UAAU,IAAK2B,eAAe,CAAC3B,UAAU;IAAE;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAE3Ge,OAAO,iBACNpD,OAAA;MAAK0F,SAAS,EAAC,SAAS;MAAA1E,QAAA,eACtBhB,OAAA;QAAAgB,QAAA,EAAG;MAAa;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CACN,EAEAS,UAAU,iBACT9C,OAAA;MAAK0F,SAAS,EAAE,eAAe,CAACtC,OAAO,GAAG,QAAQ,GAAG,EAAE,EAAG;MAAApC,QAAA,eACxDhB,OAAA,CAACL,aAAa;QAAAqB,QAAA,EAAE8B;MAAU;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CACN,EAEAW,aAAa,iBAAIhD,OAAA,CAACF,cAAc;MAACkD,aAAa,EAAEA;IAAc;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAEjEiB,YAAY,iBACXtD,OAAA;MAAK0F,SAAS,EAAC,eAAe;MAAA1E,QAAA,eAC5BhB,OAAA;QAAAgB,QAAA,EAAIsC;MAAY;QAAApB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACM,EAAA,CA1JIH,aAAa;AAAA2D,GAAA,GAAb3D,aAAa;AA4JnB,eAAeA,aAAa;AAAC,IAAAD,EAAA,EAAA4D,GAAA;AAAAC,YAAA,CAAA7D,EAAA;AAAA6D,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}