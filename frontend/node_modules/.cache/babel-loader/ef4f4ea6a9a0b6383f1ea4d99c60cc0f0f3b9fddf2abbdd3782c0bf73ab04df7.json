{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useSpeechRecognition = () => {\n  _s();\n  const [isListening, setIsListening] = useState(false); // Mic listening state\n  const [transcript, setTranscript] = useState(''); // The transcribed text\n\n  let recognition;\n  useEffect(() => {\n    // Set up the SpeechRecognition API\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n\n    // On result, update the transcript state with the recognized speech\n    recognition.onresult = event => {\n      const speechToText = event.results[0][0].transcript;\n      setTranscript(speechToText);\n      setIsListening(false); // Stop listening after the speech is transcribed\n    };\n\n    // Handle speech recognition end event\n    recognition.onend = () => {\n      setIsListening(false); // Reset listening state when recognition ends\n    };\n  }, []);\n  const startListening = () => {\n    recognition.start();\n    setIsListening(true);\n  };\n  const stopListening = () => {\n    recognition.stop();\n    setIsListening(false);\n  };\n  return {\n    isListening,\n    transcript,\n    startListening,\n    stopListening\n  };\n};\n_s(useSpeechRecognition, \"WjGDiogr+E9YMWEj/hdGCz42YjY=\");\nexport default useSpeechRecognition;","map":{"version":3,"names":["useState","useEffect","useSpeechRecognition","_s","isListening","setIsListening","transcript","setTranscript","recognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","speechToText","results","onend","startListening","start","stopListening","stop"],"sources":["/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-main/frontend/src/components/useSpeechRecognition.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useSpeechRecognition = () => {\n  const [isListening, setIsListening] = useState(false); // Mic listening state\n  const [transcript, setTranscript] = useState(''); // The transcribed text\n\n  let recognition;\n\n  useEffect(() => {\n    // Set up the SpeechRecognition API\n    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognition = new window.SpeechRecognition();\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n\n    // On result, update the transcript state with the recognized speech\n    recognition.onresult = (event) => {\n      const speechToText = event.results[0][0].transcript;\n      setTranscript(speechToText);\n      setIsListening(false); // Stop listening after the speech is transcribed\n    };\n\n    // Handle speech recognition end event\n    recognition.onend = () => {\n      setIsListening(false); // Reset listening state when recognition ends\n    };\n  }, []);\n\n  const startListening = () => {\n    recognition.start();\n    setIsListening(true);\n  };\n\n  const stopListening = () => {\n    recognition.stop();\n    setIsListening(false);\n  };\n\n  return { isListening, transcript, startListening, stopListening };\n};\n\nexport default useSpeechRecognition;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACvD,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElD,IAAIQ,WAAW;EAEfP,SAAS,CAAC,MAAM;IACd;IACAQ,MAAM,CAACC,iBAAiB,GAAGD,MAAM,CAACC,iBAAiB,IAAID,MAAM,CAACE,uBAAuB;IACrFH,WAAW,GAAG,IAAIC,MAAM,CAACC,iBAAiB,CAAC,CAAC;IAC5CF,WAAW,CAACI,UAAU,GAAG,KAAK;IAC9BJ,WAAW,CAACK,cAAc,GAAG,KAAK;IAClCL,WAAW,CAACM,IAAI,GAAG,OAAO;;IAE1B;IACAN,WAAW,CAACO,QAAQ,GAAIC,KAAK,IAAK;MAChC,MAAMC,YAAY,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACZ,UAAU;MACnDC,aAAa,CAACU,YAAY,CAAC;MAC3BZ,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;IACzB,CAAC;;IAED;IACAG,WAAW,CAACW,KAAK,GAAG,MAAM;MACxBd,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,cAAc,GAAGA,CAAA,KAAM;IAC3BZ,WAAW,CAACa,KAAK,CAAC,CAAC;IACnBhB,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMiB,aAAa,GAAGA,CAAA,KAAM;IAC1Bd,WAAW,CAACe,IAAI,CAAC,CAAC;IAClBlB,cAAc,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,OAAO;IAAED,WAAW;IAAEE,UAAU;IAAEc,cAAc;IAAEE;EAAc,CAAC;AACnE,CAAC;AAACnB,EAAA,CAtCID,oBAAoB;AAwC1B,eAAeA,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}