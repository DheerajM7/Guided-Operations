{"ast":null,"code":"var _jsxFileName = \"/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-main/frontend/src/components/ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst backendUrl = process.env.REACT_APP_BACKEND_URL;\nconst ChatInterface = ({\n  onFirstMessageSent,\n  selectedManual\n}) => {\n  _s();\n  const [inputMessage, setInputMessage] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [isFirstMessageSent, setIsFirstMessageSent] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() !== '') {\n      if (!isFirstMessageSent) {\n        setIsFirstMessageSent(true);\n        onFirstMessageSent();\n      }\n      setLoading(true);\n      setAiResponse(''); // Clear previous response\n\n      try {\n        // Open a connection to the backend using Server-Sent Events (SSE)\n        const eventSource = new EventSource(`${backendUrl}/api/chat`);\n\n        // Handle incoming streamed chunks from the server\n        eventSource.onmessage = event => {\n          const chunk = event.data;\n          setAiResponse(prev => prev + chunk); // Append each chunk to the previous response\n        };\n\n        // Handle errors\n        eventSource.onerror = () => {\n          eventSource.close();\n          setLoading(false); // Stop loading on error\n        };\n\n        // Close the connection when the response ends\n        eventSource.addEventListener('end', () => {\n          eventSource.close();\n          setLoading(false); // Stop loading when the response finishes\n        });\n      } catch (error) {\n        console.error('Error fetching AI response:', error);\n        setAiResponse('Error fetching AI response. Please try again later.');\n        setLoading(false); // Stop loading on error\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value),\n        placeholder: \"Enter your prompt here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        disabled: loading || !inputMessage.trim(),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading AI response...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 19\n    }, this), aiResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-response\",\n      children: aiResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"pN5Vw+CmT5hSp4aycegW/aauNvY=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","backendUrl","process","env","REACT_APP_BACKEND_URL","ChatInterface","onFirstMessageSent","selectedManual","_s","inputMessage","setInputMessage","aiResponse","setAiResponse","isFirstMessageSent","setIsFirstMessageSent","loading","setLoading","handleSendMessage","trim","eventSource","EventSource","onmessage","event","chunk","data","prev","onerror","close","addEventListener","error","console","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/dheerajmendu/Desktop/Milvian Group/guided-operations-main/frontend/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../styles/ChatInterface.css';\n\nconst backendUrl = process.env.REACT_APP_BACKEND_URL;\n\nconst ChatInterface = ({ onFirstMessageSent, selectedManual }) => {\n  const [inputMessage, setInputMessage] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [isFirstMessageSent, setIsFirstMessageSent] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const handleSendMessage = async () => {\n    if (inputMessage.trim() !== '') {\n      if (!isFirstMessageSent) {\n        setIsFirstMessageSent(true);\n        onFirstMessageSent();\n      }\n\n      setLoading(true);\n      setAiResponse(''); // Clear previous response\n\n      try {\n        // Open a connection to the backend using Server-Sent Events (SSE)\n        const eventSource = new EventSource(`${backendUrl}/api/chat`);\n\n        // Handle incoming streamed chunks from the server\n        eventSource.onmessage = (event) => {\n          const chunk = event.data;\n          setAiResponse((prev) => prev + chunk); // Append each chunk to the previous response\n        };\n\n        // Handle errors\n        eventSource.onerror = () => {\n          eventSource.close();\n          setLoading(false); // Stop loading on error\n        };\n\n        // Close the connection when the response ends\n        eventSource.addEventListener('end', () => {\n          eventSource.close();\n          setLoading(false); // Stop loading when the response finishes\n        });\n      } catch (error) {\n        console.error('Error fetching AI response:', error);\n        setAiResponse('Error fetching AI response. Please try again later.');\n        setLoading(false); // Stop loading on error\n      }\n    }\n  };\n\n  return (\n    <div className=\"chat-interface\">\n      <div className=\"message-input\">\n        <input\n          type=\"text\"\n          value={inputMessage}\n          onChange={(e) => setInputMessage(e.target.value)}\n          placeholder=\"Enter your prompt here...\"\n        />\n        <button onClick={handleSendMessage} disabled={loading || !inputMessage.trim()}>\n          Send\n        </button>\n      </div>\n\n      {loading && <div className=\"loading\">Loading AI response...</div>}\n\n      {aiResponse && <div className=\"ai-response\">{aiResponse}</div>}\n    </div>\n  );\n};\n\nexport default ChatInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}